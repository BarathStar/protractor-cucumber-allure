{
  "name": "Protractor-Cucumber-Allure",
  "tagline": "e2e kickstarter framework for using protractorJS with cucumberJS and allure jenkins CI reports",
  "body": "###Protractor-Cucumber-Allure Setup Guide\r\nThis project demonstrates the basic protractor-cucumber framework project setup with Jenkins CI and Allure Reports integration\r\n\r\n###Features\r\n* Crisp & Clear folder structures\r\n* Page Object design pattern implementation\r\n* DirectConnect capability for Chrome & Firefox browsers\r\n* Extensive hooks implemented for BeforeFeature, AfterFeature, AfterScenarios etc.\r\n* Screenshots on failure feature scenarios\r\n* PosgreSQL database connection feature example\r\n* Support for cucumber-html-reports\r\n* Support for CI and Cucumber-Allure-Jenkins reports\r\n\r\n###To Get Started\r\n\r\n####Pre-requisites\r\n1.NodeJS installed globally in the system.\r\n\r\n2.Chrome or Firefox browsers installed.\r\n\r\n3.Text Editor(Optional) installed-->Sublime/Visual Studio Code.\r\n\r\n####Run Scripts\r\n* Clone the repository into a folder\r\n* Go inside the folder and run following command from terminal/command prompt\r\n\r\n >  npm install \r\n\r\n* All the dependencies from package.json would be installed in node_modules folder.\r\n* Following command will launch the browser and run the scripts\r\n\r\n >   npm test\r\n\r\n####Writing Features\r\n>     Feature: To search allure reports in google\r\n      @AllureScenario\r\n      Scenario: Allure Reports Google\r\n        Given I am on google page\r\n        When I type \"allure reports\"\r\n        Then I click search button\r\n        Then I clear search textbox\r\n\r\n####Writing Step Definitions\r\n>     var homePage = function () {\r\n     'use strict';\r\n    var search = new searchPage(); \r\n    this.Given(/^I am on google page$/, function () {\r\n     return expect(search.title()).to.eventually.equal('Google');\r\n       });\r\n     };\r\n         \r\n####Writing Page Objects\r\n>     var googleSearch = function () {\r\n    \"use strict\";\r\n    this.title = function () {\r\n    return browser.driver.getTitle();\r\n    }; \r\n    this.searchTextBox= function (text) {\r\n        $(\"input[name='q']\").sendKeys(text);\r\n    };\r\n    this.searchButton = $(\"button[name='btnG']\");\r\n    this.clearText= function () {\r\n        $(\"input[name='q']\").clear();\r\n    };\r\n    };\r\n\r\n####Cucumber Hooks\r\nFollowing method takes screenshot on failure of each scenario\r\n\r\n>      this.After(function(scenario, callback) {\r\n       if (scenario.isFailed()) {\r\n       browser.takeScreenshot().then(function(base64png) {\r\n       var decodedImage = new Buffer(base64png, 'base64').toString('binary');\r\n       scenario.attach(decodedImage, 'image/png');\r\n       callback();\r\n       }, function(err) {\r\n       callback(err);\r\n       });\r\n       } else {\r\n       callback();\r\n       }\r\n       });\r\n\r\n####CucumberOpts Tags\r\nFollowing configuration shows to call specific tags from feature files\r\n\r\n>     cucumberOpts: {\r\n    monochrome: true,\r\n    strict: true,\r\n    plugin: [\"pretty\"],\r\n    require: ['../StepDefinitions/*.js', '../Support/*.js'],\r\n    tags: '@Regression,@ProtractorScenario,@AllureScenario'\r\n    }\r\n\r\n####Database Connection\r\nPostgreSQL nodejs module has been integrated with this framework, database feature file eloborates the connection and how the query results are retrieved.\r\n\r\n>     var pg = require('pg');\r\n    var connectDB = function() {\r\n    var conString = \"postgres://username:password@localhost:5432/database_name\";\r\n    this.client = new pg.Client(conString);\r\n    this.client.connect(function(err){\r\n    if(err){\r\n            return console.error('could not connect to postgres', err);\r\n        }\r\n    });\r\n    };\r\n\r\n####HTML Reports\r\nDefault cucumber HTML reports are generated which can be customized according to specific needs\r\n\r\n![cucumberreportscreen](https://raw.githubusercontent.com/igniteram/protractor-cucumber-allure/master/Images/cucumberReport.png)\r\n\r\n####Allure Reports\r\nThe reporter.js file in Support folder generates the target directory \"Reports\" in which the xml files are generated.For detail instructions on how it works, please refer the Allure-CucumberJS official repo : https://github.com/allure-framework/cucumberjs-allure-reporter\r\n\r\nHow to setup Jenkins and Allure framework : http://wiki.qatools.ru/display/AL/Allure+Jenkins+Plugin\r\n>      var reporter = require('cucumberjs-allure-reporter');\r\n     reporter.config(\r\n     {\r\n    targetDir:'./Reports/'\r\n     }\r\n     );\r\n     module.exports = reporter;\r\n\r\n![allurereportscreen](https://raw.githubusercontent.com/igniteram/protractor-cucumber-allure/master/Images/allureReport.png)\r\n![alluregraphscreen](https://raw.githubusercontent.com/igniteram/protractor-cucumber-allure/master/Images/allureReportGraph.png)\r\n\r\n##Contributions\r\nFor contributors who want to improve this repo by contributing some code, reporting bugs, issues or improving documentation - PR's are highly welcome, please maintain the coding style , folder structure , detailed description of documentation and bugs/issues with examples if possible.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}